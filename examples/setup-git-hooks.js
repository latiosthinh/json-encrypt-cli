#!/usr/bin/env node
/**
 * Git Hooks Setup Script for JSON Encryption
 * 
 * This script helps you set up automatic encryption of sensitive JSON files
 * before commits using Git hooks.
 * 
 * Usage: node setup-git-hooks.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const colors = {
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    red: '\x1b[31m',
    blue: '\x1b[34m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkGitRepository() {
    try {
        execSync('git rev-parse --git-dir', { stdio: 'ignore' });
        return true;
    } catch {
        return false;
    }
}

function checkHuskyInstalled() {
    try {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        return packageJson.devDependencies?.husky || packageJson.dependencies?.husky;
    } catch {
        return false;
    }
}

function createPreCommitHook(directories) {
    const hookContent = `#!/bin/sh
# JSON Encryption Pre-commit Hook
# Auto-generated by json-encrypt-cli setup

echo "üîê Encrypting sensitive JSON files..."

# Directories to encrypt
SENSITIVE_DIRS=(${directories.map(dir => `"${dir}"`).join(' ')})

for dir in "\${SENSITIVE_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        echo "üìÅ Encrypting JSON files in: $dir"
        npx json-batch-encrypt "$dir" --recursive
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully encrypted files in $dir"
            git add "$dir"
        else
            echo "‚ùå Failed to encrypt files in $dir"
            exit 1
        fi
    fi
done

echo "üéâ Pre-commit encryption completed!"
exit 0`;

    return hookContent;
}

function setupWithHusky(directories) {
    try {
        log('üì¶ Installing husky...', 'blue');
        execSync('npm install --save-dev husky', { stdio: 'inherit' });
        
        log('üîß Initializing husky...', 'blue');
        execSync('npx husky install', { stdio: 'inherit' });
        
        const hookCommand = directories
            .map(dir => `npx json-batch-encrypt ${dir} --recursive`)
            .join(' && ') + ' && git add .';
            
        log('ü™ù Creating pre-commit hook...', 'blue');
        execSync(`npx husky add .husky/pre-commit "${hookCommand}"`, { stdio: 'inherit' });
        
        log('‚úÖ Husky pre-commit hook created successfully!', 'green');
        return true;
    } catch (error) {
        log(`‚ùå Failed to setup husky: ${error.message}`, 'red');
        return false;
    }
}

function setupManualHook(directories) {
    const hooksDir = '.git/hooks';
    const preCommitPath = path.join(hooksDir, 'pre-commit');
    
    try {
        if (!fs.existsSync(hooksDir)) {
            log('‚ùå Git hooks directory not found. Are you in a Git repository?', 'red');
            return false;
        }
        
        const hookContent = createPreCommitHook(directories);
        fs.writeFileSync(preCommitPath, hookContent, { mode: 0o755 });
        
        log('‚úÖ Manual pre-commit hook created successfully!', 'green');
        log(`üìÅ Hook location: ${preCommitPath}`, 'blue');
        return true;
    } catch (error) {
        log(`‚ùå Failed to create manual hook: ${error.message}`, 'red');
        return false;
    }
}

function promptDirectories() {
    log('\nüìã Please specify directories containing sensitive JSON files:', 'bold');
    log('   (Enter one per line, empty line to finish)', 'yellow');
    log('   Examples: src/config, data/secrets, config/production\n');
    
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    const directories = [];
    
    return new Promise((resolve) => {
        function askForDirectory() {
            rl.question(`Directory ${directories.length + 1}: `, (answer) => {
                if (answer.trim() === '') {
                    rl.close();
                    resolve(directories);
                } else {
                    directories.push(answer.trim());
                    askForDirectory();
                }
            });
        }
        askForDirectory();
    });
}

async function main() {
    log('üîê JSON Encryption Git Hooks Setup', 'bold');
    log('=====================================\n');
    
    // Check if we're in a Git repository
    if (!checkGitRepository()) {
        log('‚ùå This is not a Git repository. Please run this script in a Git repository.', 'red');
        process.exit(1);
    }
    
    log('‚úÖ Git repository detected', 'green');
    
    // Get directories to encrypt
    const directories = await promptDirectories();
    
    if (directories.length === 0) {
        log('‚ö†Ô∏è  No directories specified. Exiting.', 'yellow');
        process.exit(0);
    }
    
    log(`\nüìÅ Directories to encrypt: ${directories.join(', ')}`, 'blue');
    
    // Choose setup method
    const hasHusky = checkHuskyInstalled();
    
    if (hasHusky) {
        log('\nüì¶ Husky detected. Using husky for hook management.', 'blue');
        setupWithHusky(directories);
    } else {
        log('\nüîß Setting up manual Git hook...', 'blue');
        const success = setupManualHook(directories);
        
        if (success) {
            log('\nüí° Tip: Consider using husky for better hook management:', 'yellow');
            log('   npm install --save-dev husky && npx husky install', 'yellow');
        }
    }
    
    log('\nüéâ Setup completed!', 'green');
    log('\nüìã Next steps:', 'bold');
    log('   1. Ensure your .env file contains ENC_ALGORITHM and ENC_SECRET');
    log('   2. Test the hook by making a commit with JSON files in specified directories');
    log('   3. Verify that .enc files are created and committed');
}

if (require.main === module) {
    main().catch(error => {
        log(`‚ùå Setup failed: ${error.message}`, 'red');
        process.exit(1);
    });
}

module.exports = { setupWithHusky, setupManualHook, createPreCommitHook };