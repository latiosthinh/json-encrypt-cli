// Decryption example for accounts.prep.enc
// Generated by json-encrypt-cli
// Note: Algorithm is hidden in encrypted file for security

import * as crypto from 'crypto';
import * as fs from 'fs';

interface EncryptedData {
  iv: string;
  authTag?: string;
  encrypted: string;
}

function decryptFile(filePath: string, algorithm: string, secretKey: string): any {
  try {
    // Read the encrypted file
    const encryptedData: EncryptedData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    // Generate key using the same method as encryption
    const keyLength = algorithm.includes('256') ? 32 : 
                     algorithm.includes('192') ? 24 : 16;
    const key = crypto.scryptSync(secretKey, 'salt', keyLength);
    
    const iv = Buffer.from(encryptedData.iv, 'hex');
    
    let decrypted: string;
    
    if (algorithm.includes('gcm')) {
      // GCM mode decryption
      const decipher = crypto.createDecipheriv(algorithm, key, iv);
      if (encryptedData.authTag) {
        decipher.setAuthTag(Buffer.from(encryptedData.authTag, 'hex'));
      }
      decipher.setAAD(Buffer.from('json-encrypt', 'utf8'));
      
      decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
    } else {
      // CBC mode decryption
      const decipher = crypto.createDecipheriv(algorithm, key, iv);
      decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
    }
    
    return JSON.parse(decrypted);
  } catch (error) {
    throw new Error(`Decryption failed: ${error.message}`);
  }
}

// Example usage (you must provide the algorithm used for encryption):
// const decryptedData = decryptFile('accounts.prep.enc', 'aes-256-gcm', 'your-secret-key');
// console.log(decryptedData);

export { decryptFile };
